# problem link - https://leetcode.com/problems/longest-palindromic-substring/description/
# code - 
class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
        vector<vector<bool>> dp(n, vector<bool>(n, false));
        int maxLen = 0;
        int index = 0;
        for(int L=1; L<=n; L++){
            for(int i=0; i+L<=n; i++){
                int j = i+L-1;
                if(i==j){
                    dp[i][i] = true;
                    index = i;
                    maxLen = 1;
                }
                else if(i+1==j && (s[i]==s[j])){
                    dp[i][j] = true;
                    maxLen = 2;
                    index = i;
                }
                else if((s[i]==s[j]) && (dp[i+1][j-1]==true)){
                    dp[i][j] = true;
                    if(j-i+1 > maxLen){
                        maxLen = j-i+1;
                        index = i;
                    }
                }
                else{
                    dp[i][j] = false;
                }
            }
        }
        return s.substr(index, maxLen);
    }
};
