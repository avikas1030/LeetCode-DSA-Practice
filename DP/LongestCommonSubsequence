# Problem Link - https://leetcode.com/problems/longest-common-subsequence/
# Code - 
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.length();
        int n = text2.length();
        vector<vector<int>> dp(m+1, vector<int>(n+1));
        for(int row = 0; row <= m; row++){
            dp[row][0];
        }
        for(int col = 0; col <= m; col++){
            dp[0][col];
        }
        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++){
                if(text1[i-1] == text2[j-1]){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }
                else{
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        

        // printing LCS  this is additional code to prinnt LCS
        int i = m;
        int j = n;
        string LCS = "";
        while(i > 0 && j > 0){
            if(text1[i-1] == text2[j-1]){
                LCS = text2[j-1] + LCS;
                i--;
                j--;
            }
            else{
                if(dp[i-1][j] > dp[i][j-1]){
                    i--;
                }
                else{
                    j--;
                }
            }
        }
        cout<<LCS<<endl;
        return dp[m][n];
    }
};
